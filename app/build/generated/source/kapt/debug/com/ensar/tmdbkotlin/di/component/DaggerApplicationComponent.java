// Generated by Dagger (https://google.github.io/dagger).
package com.ensar.tmdbkotlin.di.component;

import android.content.Context;
import android.content.SharedPreferences;
import com.ensar.tmdbkotlin.App;
import com.ensar.tmdbkotlin.db.AppDatabase;
import com.ensar.tmdbkotlin.di.module.ApplicationModule;
import com.ensar.tmdbkotlin.di.module.ApplicationModule_ProvideAppFactory;
import com.ensar.tmdbkotlin.di.module.ApplicationModule_ProvideContextFactory;
import com.ensar.tmdbkotlin.di.module.ApplicationModule_ProvideSharedPreferencesFactory;
import com.ensar.tmdbkotlin.di.module.DatabaseModule;
import com.ensar.tmdbkotlin.di.module.DatabaseModule_GetDatabaseFactory;
import com.ensar.tmdbkotlin.di.module.NetModule;
import com.ensar.tmdbkotlin.ui.main.MainActivityViewModel;
import com.ensar.tmdbkotlin.ui.main.MainActivityViewModel_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<App> provideAppProvider;

  private Provider<Context> provideContextProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<AppDatabase> getDatabaseProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideAppProvider =
        DoubleCheck.provider(ApplicationModule_ProvideAppFactory.create(builder.applicationModule));
    this.provideContextProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideContextFactory.create(builder.applicationModule));
    this.provideSharedPreferencesProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideSharedPreferencesFactory.create(builder.applicationModule));
    this.getDatabaseProvider =
        DoubleCheck.provider(
            DatabaseModule_GetDatabaseFactory.create(
                builder.databaseModule, provideContextProvider));
  }

  @Override
  public App app() {
    return provideAppProvider.get();
  }

  @Override
  public Context context() {
    return provideContextProvider.get();
  }

  @Override
  public SharedPreferences preferences() {
    return provideSharedPreferencesProvider.get();
  }

  @Override
  public void inject(MainActivityViewModel mainActivityViewModel) {
    injectMainActivityViewModel(mainActivityViewModel);
  }

  private MainActivityViewModel injectMainActivityViewModel(MainActivityViewModel instance) {
    MainActivityViewModel_MembersInjector.injectDb(instance, getDatabaseProvider.get());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private DatabaseModule databaseModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (applicationModule == null) {
        throw new IllegalStateException(
            ApplicationModule.class.getCanonicalName() + " must be set");
      }
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      return new DaggerApplicationComponent(this);
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder netModule(NetModule netModule) {
      Preconditions.checkNotNull(netModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }
  }
}
