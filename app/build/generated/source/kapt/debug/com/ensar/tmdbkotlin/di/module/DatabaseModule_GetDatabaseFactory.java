// Generated by Dagger (https://google.github.io/dagger).
package com.ensar.tmdbkotlin.di.module;

import android.content.Context;
import com.ensar.tmdbkotlin.db.AppDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DatabaseModule_GetDatabaseFactory implements Factory<AppDatabase> {
  private final DatabaseModule module;

  private final Provider<Context> contextProvider;

  public DatabaseModule_GetDatabaseFactory(
      DatabaseModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public AppDatabase get() {
    return Preconditions.checkNotNull(
        module.getDatabase(contextProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DatabaseModule_GetDatabaseFactory create(
      DatabaseModule module, Provider<Context> contextProvider) {
    return new DatabaseModule_GetDatabaseFactory(module, contextProvider);
  }

  public static AppDatabase proxyGetDatabase(DatabaseModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.getDatabase(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
